public class LinkedListNode {
	int value ;
	LinkedListNode  next;
	public int getvalue ()
	{
		return value;
	}
	public LinkedListNode getnext ()
	{
		return next;
	}
	
}

public class MySpecialLinkedListUtils {
	
	LinkedListNode head;
	public  LinkedListNode reverse ()
	{
		LinkedListNode current=head;
		LinkedListNode perivious=null;
		LinkedListNode next=null;
		while (current!=null)
		{
			next=current.next;
			current.next=perivious;
			perivious=current;
			current=next;
			
		}
		return perivious;
	
		
		
		
	}
	public int getlength()
	{
		LinkedListNode n;
		n=head;
		int m=0;
		while (n.next!=null)
		{
			n=n.next;
			m++;
		}
		m=m+1;
		return m;
	}
	public  void summary()
	
	{
		LinkedListNode n;
		n=head;
		int sum=0;
		int k=0;
		
		while (n.next!=null)
		{
			
			sum=sum+n.value;
			n=n.next;
			k++;
		}
		sum=sum+n.value;
		
		double average=sum/(double )(k+1);
		LinkedListNode current =head;
		
		
			if((int) (k+1)%2==0)
			{
			for (int i=0;i<((k+1)/2)-1;i++)
			{
				current=current.next;
			}
		  System.out.println(current.getvalue());

			current=current.next;
			System.out.println(current.getvalue());
			}
			if ((k+1)%2!=0)
			{
				for (int i=0;i<(k+1)/2;i++)
				{
					current=current.next;
				}
				System.out.println(current.getvalue());
				
			}
			current=head;
			int max=0;
			for (int i=0;i<k+1;i++)
			{
				if (current.getvalue() >max)
				{
					max=current.getvalue();
				}
				current=current.next;
			}
			System.out.println(max);
			current=head;
			int min;
			min=max;
			for (int i=0;i<k+1;i++)
			{
				if (current.getvalue()<min)
				{
					min=current.getvalue();
				}
				current=current.next;
			}
			System.out.println(min);	
}	
	

	
	public void evenindex()
	{
		LinkedListNode current;
		current=head;
		for (int i=0;i<getlength();i++)
		{
			if (i%2==0)
			{
				System.out.println(current.getvalue());
			}
			current=current.next;
		}
		
	}
	
	public void removecentral() {
		LinkedListNode n;
		n=head;
	if (getlength()%2==0) {
		for (int i=0;i<(getlength()-2)/2;i++)
		{
		n=n.next;	
			
		}
		
		LinkedListNode current =n.next;
		n.next=current.next;
		current.next=null;
	}
		LinkedListNode omar =head;
		for (int i=0;i<(getlength()-2)/2;i++)
		{
			omar=omar.next;
		}
		LinkedListNode node =omar.next;
		omar.next=node.next;
		node.next=null;
		
	}
	
public LinkedListNode middlenode (LinkedListNode node)
{
	LinkedListNode a=node;
	LinkedListNode b=node.next;
	while (a.next!=null&& b.next!=null)
	{
		a=a.next;
		b=b.next.next;
	}
	return a;
}

public LinkedListNode mergesort(LinkedListNode node)
{

	if (node==null||node.next==null)
	{
		return node;
	}
	LinkedListNode middle= middlenode(node);
	LinkedListNode secondhalf= middle.next;
	middle.next=null;
	return merge (mergesort(node),mergesort(secondhalf));
}
public LinkedListNode merge (LinkedListNode a,LinkedListNode b)
{
	LinkedListNode temp=new LinkedListNode();
	LinkedListNode finallist=temp;
	while (a!=null&&b!=null)
	{
		if (a.getvalue()<b.getvalue())
		{
			temp.next=a;
			a=a.next;
		}
		else
		{
			temp.next=b;
			b=b.next;
		}
		temp=temp.next;
	}
	return finallist.next;
	
}
public  LinkedListNode insertionsort()
{
	
	LinkedListNode dummy=new LinkedListNode();
	LinkedListNode current=head;
	LinkedListNode prev;
	prev=dummy;
	LinkedListNode temp=null;
	
	while (head!=null)	
	{
		temp=head.next;
		while (prev.next!=null&& prev.next.getvalue()<current.getvalue())
		
		{
			prev=prev.next;
		}
		current.next=prev.next;
		prev.next=current;
		current=temp;
		prev=dummy;
	}
	return dummy.next;
	
	

	
}
public boolean palindrome ()
{
	LinkedListNode current=head;
	LinkedListNode runner=head;
	Stack<Integer> stack=new Stack<Integer>();
	while (runner.next!=null)
	{
	
		stack.push(current.getvalue());
		current=current.next;
		runner = runner.next.next;
		
	}
	if (runner!=null)
	{
		current=current.next;
	}
	while (current!=null)
	{
		if (stack.pop().intValue()!=current.getvalue())
			return false;
		current=current.next;
	}
	return false;
}
}
